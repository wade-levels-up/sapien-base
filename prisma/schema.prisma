// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @unique
  firstName              String
  lastName               String
  joined                 DateTime        @default(now())
  profilePicturePath     String          @default("")
  bio                    String          @default("")
  following              User[]          @relation("UserFollows")
  followedBy             User[]          @relation("UserFollows")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  posts                  Post[]
  Comment                Comment[]
  Like                   Like[]
}

model FollowRequest {
  id        String   @id @default(uuid())
  from      User     @relation("FollowRequestsSent", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("FollowRequestsReceived", fields: [toId], references: [id])
  toId      String
  createdAt DateTime @default(now())
}

model Post {
  id              String    @id @default(uuid())
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  content         String
  comments        Comment[]
  likes           Like[]
  createdAt       DateTime  @default(now())
  postPicturePath String    @default("")
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  // Enforce each combination of postId and userId is unique to prevent duplicate Likes
  @@unique([postId, userId])
}
